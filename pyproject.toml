[project]
name = "latticevision"
version = "0.1.0"
description = "TransUNet models as neural estimators for massive nonstationary spatial data"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    # basics
    "numpy>=2.1.1",
    "matplotlib>=3.9.2",
    "pandas>=2.2.3",
    # notebook
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    # scikit
    "scikit-image>=0.24.0",
    "scikit-learn>=1.5.2",
    # torch
    "torch>=2.5.1",
    "torchsummary>=1.5.1",
    "torchvision>=0.19.1",
    "torchtune>=0.5.0", # for RoPE and compatible MHA
    "torchao", # required by torchtune?
    # other
    "h5py>=3.12.1",
    "pysr>=0.19.4",
    "netcdf4>=1.5.8",
]

# default groups to install
[tool.uv]
default-groups = ["dev", "lint"]

[dependency-groups]
# dev group -- testing, type checking, etc
dev = [
	# test
	"pytest>=8.2.2",
	# coverage
	"pytest-cov>=4.1.0",
	"coverage-badge>=1.1.0",
	# type checking
	"mypy>=1.0.1",
	# docs
	'pdoc>=14.6.0',
	# tomli since no tomlib in python < 3.11
	"tomli>=2.1.0; python_version < '3.11'",
    # lmcat -- a custom library. not exactly docs, but lets an LLM see all the code
    "lmcat>=0.2.0; python_version >= '3.11'",
]
# lint group -- just formatting stuff   
lint = [
	# lint
	"pycln>=2.1.3",
	"ruff>=0.4.8",
]

# project links -- used in doc gen
[project.urls]
Homepage = "https://github.com/antonyxsik/LatticeVision"
Documentation = "https://github.com/antonyxsik/LatticeVision"
Repository = "https://github.com/antonyxsik/LatticeVision"
Issues = "https://github.com/antonyxsik/LatticeVision/issues"

# how to build the package
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ruff config
[tool.ruff]
exclude = ["__pycache__", "notebooks/old", "latticevision/stun/old"]

[tool.ruff.format]
indent-style = "tab"
skip-magic-trailing-comma = false


[tool.ruff.lint]
# Allow equality comparisons to False 
ignore = ["E712"]

# Custom export configurations
[tool.uv-exports]
args = [
	"--no-hashes"
]
exports = [
	# no groups, no extras, just the base dependencies
    { name = "base", groups = false, extras = false },
	# all groups and extras
    { name = "all", filename="requirements-all.txt", groups = true, extras=true },
]

# `make lmcat` depends on the lmcat and can be configured here
[tool.lmcat]
	output = ".meta/lmcat.txt" # changing this might mean it wont be accessible from the docs
	ignore_patterns = [
		".venv/**",
		".git/**",
		".meta/**",
		"uv.lock",
		"LICENSE",
        ".RData",
        "sample_data/**",
        "results/**",
        ".pytest_cache/**",
        ".ruff_cache/**",
	]
    [tool.lmcat.glob_process]
        "[mM]akefile" = "makefile_recipes"
        "*.ipynb" = "ipynb_to_md"